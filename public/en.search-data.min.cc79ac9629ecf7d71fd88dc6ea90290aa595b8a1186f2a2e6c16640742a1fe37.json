[{"id":0,"href":"/curso-programacion-python/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/curso-programacion-python/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/curso-programacion-python/docs/course/como-usar-curso/","title":"Conóce el curso","section":"Docs","content":" Conóce tu curso # Estructura de clases # Cada semana tendrá una clase disponible, y una vez al mes haremos una reunión del curso\nEste curso está estructurado en semanas. Para cada semana tendremos una sesión para hacer la clase de la semanarevisar los aprendizajes esperados y tener una conversación al respecto.\n"},{"id":3,"href":"/curso-programacion-python/docs/course/s1-variables-funciones/","title":"Semana 1: Variables y funciones","section":"Docs","content":" Semana 1: Variables y funciones # 📌 Contenido # Creando Código con Python Funciones Bugs Mejorando tu Primer Programa en Python Variables Comentarios Pseudocódigo Mejoras en tu Programa Cadenas de Texto y Parámetros Números Enteros (int) y de Punto Flotante (float) Definiendo Funciones (def) Retorno de Valores Resumen Creando Código con Python # Configuración del Entorno # Python se ejecuta a través de un editor de texto como VS Code. Para empezar:\nAbre VS Code y crea un archivo hello.py. Escribe el siguiente código en hello.py: print(\u0026#34;hello, world\u0026#34;) Para ejecutar el programa, abre la terminal y escribe: python hello.py La salida será: hello, world Este es tu primer programa en Python. 🎉\nFunciones en Python # Qué son las funciones # Una función es un bloque de código que realiza una tarea específica. Python tiene funciones predefinidas como print() y input().\n📍 Uso de la función print() # print(\u0026#34;hello, world\u0026#34;) print() es una función que muestra un mensaje en la pantalla. El argumento dentro de print() es el texto que queremos imprimir. Bugs (Errores en el Código) # Los errores son parte del aprendizaje. Ejemplo de un error en Python:\nprint(\u0026#34;hello, world\u0026#34; 🔹 Error: Falta el paréntesis de cierre ). Python indicará el error en la terminal.\nMejorando tu Primer Programa en Python # Podemos personalizar el programa para que el usuario ingrese su nombre:\nname = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) print(\u0026#34;hello,\u0026#34;, name) 🔹 Explicación:\ninput() solicita información al usuario. La respuesta se almacena en la variable name. print(\u0026quot;hello,\u0026quot;, name) imprime el saludo con el nombre ingresado. Variables en Python # Una variable es un contenedor para almacenar un valor:\nname = \u0026#34;Carlos\u0026#34; print(name) 🔹 Explicación:\nname almacena el texto \u0026ldquo;Carlos\u0026rdquo;. print(name) muestra el valor de name. Comentarios en Python # Los comentarios ayudan a documentar el código y no afectan la ejecución:\n# Este es un comentario name = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) print(\u0026#34;hello,\u0026#34;, name) # Saludo al usuario Pseudocódigo # El pseudocódigo ayuda a planificar el programa antes de escribir el código real:\n1. Pedir el nombre del usuario 2. Guardar el nombre en una variable 3. Imprimir un saludo con el nombre 🔹 Ejemplo en Python:\n# Pedir el nombre name = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) # Imprimir el saludo print(\u0026#34;hello,\u0026#34;, name) Cadenas de Texto y Parámetros # Una cadena de texto es una secuencia de caracteres. Podemos formatear cadenas de varias maneras:\nConcatenación de Strings # name = \u0026#34;Carlos\u0026#34; print(\u0026#34;hello, \u0026#34; + name) Formato con f-strings # name = \u0026#34;Carlos\u0026#34; print(f\u0026#34;hello, {name}\u0026#34;) 🔹 Ventajas de f-strings:\nMás legible y eficiente. Soporta expresiones dentro de {}. Números Enteros (int) y de Punto Flotante (float) # Podemos realizar operaciones matemáticas con int y float:\nx = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) y = int(input(\u0026#34;What\u0026#39;s y? \u0026#34;)) print(x + y) 🔹 Explicación:\nint(input()) convierte la entrada del usuario a un número entero. Se suman x e y. Uso de float y Redondeo # x = float(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) y = float(input(\u0026#34;What\u0026#39;s y? \u0026#34;)) z = round(x / y, 2) print(z) 🔹 Explicación:\nfloat() permite números decimales. round(x / y, 2) redondea el resultado a 2 decimales. Definiendo Funciones (def) # Las funciones permiten reutilizar código:\ndef hello(): print(\u0026#34;hello, world\u0026#34;) hello() 🔹 Explicación:\ndef hello(): define una función. hello() llama a la función. Funciones con Parámetros # def hello(name): print(\u0026#34;hello,\u0026#34;, name) hello(\u0026#34;Carlos\u0026#34;) 🔹 Explicación:\nLa función hello() recibe name como parámetro. Retorno de Valores (return) # Las funciones pueden devolver valores:\ndef square(n): return n * n print(square(4)) 🔹 Explicación:\nreturn devuelve el resultado de n * n. Resumen # ✔️ Funciones: Bloques de código reutilizables. ✔️ Bugs: Errores en el código. ✔️ Variables: Almacenan valores. ✔️ Comentarios: Notas en el código. ✔️ Pseudocódigo: Planificación del programa. ✔️ Strings: Secuencias de texto. ✔️ int y float: Números enteros y decimales. ✔️ def y return: Crear y retornar valores en funciones. 🚀 Ahora puedes escribir programas más complejos en Python!\n"},{"id":4,"href":"/curso-programacion-python/docs/course/s2-control-condicionales/","title":"Semana 2: Condicionales","section":"Docs","content":" Semana 2: Estructuras condicionales # 📌 Contenido # Condicionales Sentencias if Flujo de control con elif y else Operadores lógicos or y and Operador Módulo % Creación de una función de paridad Código \u0026ldquo;Pythonic\u0026rdquo; Uso de match Resumen 🔹 Condicionales # Las condicionales permiten que un programa tome decisiones según ciertas condiciones. En Python, se utilizan operadores de comparación para evaluar estas condiciones:\nOperador Significado \u0026lt; Menor que \u0026gt; Mayor que \u0026lt;= Menor o igual que \u0026gt;= Mayor o igual que == Igual a (doble =) != Diferente de Ejemplo:\nx = 10 y = 5 if x \u0026gt; y: print(\u0026#34;x es mayor que y\u0026#34;) 🔹 Sentencias if # El if permite ejecutar un bloque de código solo si la condición es True.\nx = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) y = int(input(\u0026#34;What\u0026#39;s y? \u0026#34;)) if x \u0026lt; y: print(\u0026#34;x es menor que y\u0026#34;) 🔹 Flujo de Control: elif y else # Cuando hay múltiples condiciones, se usa elif (else if) y else para definir rutas alternativas:\nx = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) y = int(input(\u0026#34;What\u0026#39;s y? \u0026#34;)) if x \u0026lt; y: print(\u0026#34;x es menor que y\u0026#34;) elif x \u0026gt; y: print(\u0026#34;x es mayor que y\u0026#34;) else: print(\u0026#34;x es igual a y\u0026#34;) 🔹 Explicación:\nSi x \u0026lt; y, imprime \u0026ldquo;x es menor que y\u0026rdquo; y no evalúa las siguientes condiciones. Si x \u0026gt; y, imprime \u0026ldquo;x es mayor que y\u0026rdquo;. Si ninguna de las condiciones anteriores se cumple, ejecuta else. 🔹 Operador or # or evalúa si al menos una de las condiciones es verdadera:\nx = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) y = int(input(\u0026#34;What\u0026#39;s y? \u0026#34;)) if x \u0026lt; y or x \u0026gt; y: print(\u0026#34;x no es igual a y\u0026#34;) else: print(\u0026#34;x es igual a y\u0026#34;) 🔹 Operador and # and evalúa si ambas condiciones son verdaderas:\nscore = int(input(\u0026#34;Score: \u0026#34;)) if score \u0026gt;= 90 and score \u0026lt;= 100: print(\u0026#34;Grade: A\u0026#34;) elif score \u0026gt;= 80 and score \u0026lt; 90: print(\u0026#34;Grade: B\u0026#34;) elif score \u0026gt;= 70 and score \u0026lt; 80: print(\u0026#34;Grade: C\u0026#34;) elif score \u0026gt;= 60 and score \u0026lt; 70: print(\u0026#34;Grade: D\u0026#34;) else: print(\u0026#34;Grade: F\u0026#34;) ✅ Se puede escribir de forma más Pythonic:\nif 90 \u0026lt;= score \u0026lt;= 100: print(\u0026#34;Grade: A\u0026#34;) 🔹 Operador Módulo % # El módulo (%) devuelve el residuo de una división. Se usa para verificar si un número es par o impar:\nx = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) if x % 2 == 0: print(\u0026#34;Even\u0026#34;) else: print(\u0026#34;Odd\u0026#34;) 🔹 Creación de una Función de Paridad # Podemos crear una función para verificar si un número es par:\ndef is_even(n): return n % 2 == 0 def main(): x = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) if is_even(x): print(\u0026#34;Even\u0026#34;) else: print(\u0026#34;Odd\u0026#34;) main() 🔹 Código \u0026ldquo;Pythonic\u0026rdquo; # Python permite escribir código de forma más concisa. Podemos refactorizar is_even(n):\ndef is_even(n): return True if n % 2 == 0 else False O incluso más limpio:\ndef is_even(n): return n % 2 == 0 ✅ Mejor legibilidad y eficiencia.\n🔹 Uso de match # match es similar a if-elif-else pero más limpio en ciertos casos:\nname = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) match name: case \u0026#34;Harry\u0026#34; | \u0026#34;Hermione\u0026#34; | \u0026#34;Ron\u0026#34;: print(\u0026#34;Gryffindor\u0026#34;) case \u0026#34;Draco\u0026#34;: print(\u0026#34;Slytherin\u0026#34;) case _: print(\u0026#34;Who?\u0026#34;) 🔹 Explicación:\ncase \u0026quot;Harry\u0026quot; | \u0026quot;Hermione\u0026quot; | \u0026quot;Ron\u0026quot;: agrupa varios casos en uno solo. case _: es un \u0026ldquo;catch-all\u0026rdquo;, similar a else. 📌 Resumen # ✔️ Condicionales permiten tomar decisiones en un programa. ✔️ if ejecuta código si una condición es verdadera. ✔️ elif y else manejan múltiples opciones. ✔️ or verifica si al menos una condición es True. ✔️ and verifica si ambas condiciones son True. ✔️ % ayuda a determinar si un número es par o impar. ✔️ Funciones permiten reutilizar código, como is_even(n). ✔️ Código Pythonic mejora la legibilidad y eficiencia. ✔️ match simplifica comparaciones con muchos casos. 🚀 Ahora puedes construir programas con decisiones lógicas en Python!\n"},{"id":5,"href":"/curso-programacion-python/docs/course/s3-control-bucles/","title":"Semana 3: Bucles","section":"Docs","content":" Semana 3: Bucles # 📌 Contenido # Bucles (while, for) Mejorando el input del usuario Listas (list) Longitud de listas (len) Diccionarios (dict) Generando patrones (Mario) Resumen 🔹 Bucles (Loops) # Un bucle permite ejecutar una tarea repetidamente sin escribir el mismo código muchas veces.\n📍 Ejemplo sin bucles: # print(\u0026#34;meow\u0026#34;) print(\u0026#34;meow\u0026#34;) print(\u0026#34;meow\u0026#34;) 💡 Problema: No es escalable si queremos imprimir \u0026ldquo;meow\u0026rdquo; 500 veces.\n🔹 Bucles while # Un while repite un bloque de código mientras una condición sea True.\ni = 0 while i \u0026lt; 3: print(\u0026#34;meow\u0026#34;) i += 1 ✅ Explicación:\ni = 0: Inicializa el contador. while i \u0026lt; 3: Continúa ejecutando hasta que i alcance 3. i += 1: Incrementa i en cada iteración. ⚠ Error común: Bucle infinito si olvidamos i += 1.\n🔹 Bucles for # Un for es ideal para recorrer una secuencia de valores.\nfor i in range(3): print(\u0026#34;meow\u0026#34;) 🔹 Ventajas:\nrange(3) genera los valores 0, 1, 2 automáticamente. Evita errores con el contador (i se maneja internamente). 📍 Uso del guion bajo _ # Si no necesitamos i, usamos _ para indicar que no lo usaremos:\nfor _ in range(3): print(\u0026#34;meow\u0026#34;) 🔹 Mejorando el Input del Usuario # Podemos validar el input del usuario con un bucle while:\nwhile True: n = int(input(\u0026#34;What\u0026#39;s n? \u0026#34;)) if n \u0026gt; 0: break ✅ Explicación:\nwhile True: Crea un bucle infinito. if n \u0026gt; 0: Solo rompe el bucle si n es positivo. 🔹 Uso de Funciones # Podemos organizar nuestro código con funciones:\ndef main(): meow(get_number()) def get_number(): while True: n = int(input(\u0026#34;What\u0026#39;s n? \u0026#34;)) if n \u0026gt; 0: return n def meow(n): for _ in range(n): print(\u0026#34;meow\u0026#34;) main() 🔹 Ventajas:\nget_number() maneja la validación. meow(n) imprime n veces. main() organiza la ejecución. 🔹 Listas (list) # Las listas almacenan varios valores en una estructura ordenada.\nstudents = [\u0026#34;Hermione\u0026#34;, \u0026#34;Harry\u0026#34;, \u0026#34;Ron\u0026#34;] Podemos acceder a los elementos por su índice:\nprint(students[0]) # Hermione print(students[1]) # Harry print(students[2]) # Ron 📍 Recorriendo una lista con for # for student in students: print(student) ✅ Ventaja: Evita repetir print() manualmente.\n📍 Uso de len() # Podemos obtener la longitud de una lista con len():\nfor i in range(len(students)): print(i + 1, students[i]) 🔹 Diccionarios (dict) # Los diccionarios almacenan datos en formato clave: valor.\nstudents = { \u0026#34;Hermione\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;Harry\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;Ron\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;Draco\u0026#34;: \u0026#34;Slytherin\u0026#34;, } Podemos acceder a los valores por su clave:\nprint(students[\u0026#34;Hermione\u0026#34;]) # Gryffindor 📍 Recorriendo un diccionario # for student in students: print(student, students[student], sep=\u0026#34;, \u0026#34;) 🔹 Salida esperada:\nHermione, Gryffindor Harry, Gryffindor Ron, Gryffindor Draco, Slytherin 📍 Diccionarios dentro de listas # Podemos almacenar información más compleja:\nstudents = [ {\u0026#34;name\u0026#34;: \u0026#34;Hermione\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;patronus\u0026#34;: \u0026#34;Otter\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Harry\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;patronus\u0026#34;: \u0026#34;Stag\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Ron\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;patronus\u0026#34;: \u0026#34;Jack Russell terrier\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Draco\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Slytherin\u0026#34;, \u0026#34;patronus\u0026#34;: None}, ] 🔹 Recorriendo la lista y accediendo a cada diccionario:\nfor student in students: print(student[\u0026#34;name\u0026#34;], student[\u0026#34;house\u0026#34;], student[\u0026#34;patronus\u0026#34;], sep=\u0026#34;, \u0026#34;) 🔹 Generando Patrones (Mario) # Podemos imprimir patrones con bucles anidados.\n📍 Columna de 3 bloques # for _ in range(3): print(\u0026#34;#\u0026#34;) 📍 Cuadrado de 3x3 # for i in range(3): for j in range(3): print(\u0026#34;#\u0026#34;, end=\u0026#34;\u0026#34;) print() 📍 Refactorizando con funciones # def main(): print_square(3) def print_square(size): for _ in range(size): print_row(size) def print_row(width): print(\u0026#34;#\u0026#34; * width) main() 🔹 Ventajas:\nprint_square(size): Genera un cuadrado de sizexsize. print_row(width): Imprime una fila de width caracteres. 📌 Resumen # ✔️ while y for permiten repetir tareas ✔️ Validación de input con while mejora la interactividad. ✔️ Listas (list) almacenan datos ordenados. ✔️ Diccionarios (dict) almacenan datos en pares clave: valor. ✔️ Bucles anidados generan patrones. ✔️ Funciones ayudan a estructurar mejor el código. 🚀 Ahora puedes trabajar con estructuras de datos y bucles en Python!\n"},{"id":6,"href":"/curso-programacion-python/docs/course/s4-manejo-errores/","title":"Semana 4: Manejo de errores","section":"Docs","content":" Semana 4: Manejo de errores # 📌 Contenido # Excepciones en Python Errores en tiempo de ejecución Manejo de errores con try Uso de else en try Creando una función para obtener un entero Uso de pass Resumen 🔹 Excepciones en Python # Las excepciones ocurren cuando algo sale mal en el código.\nEjemplo de un error de sintaxis:\nprint(\u0026#34;hello, world) 🔹 Error generado:\nSyntaxError: EOL while scanning string literal 💡 Solución: Revisar la sintaxis y corregir el error.\nPuedes aprender más en la documentación oficial de Python sobre errores y excepciones.\n🔹 Errores en Tiempo de Ejecución (Runtime Errors) # Los errores en tiempo de ejecución ocurren cuando la entrada del usuario no es la esperada.\nx = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) print(f\u0026#34;x is {x}\u0026#34;) ⚠ Problema: Si el usuario ingresa texto en lugar de un número, el programa genera un error:\nValueError: invalid literal for int() with base 10: \u0026#39;cat\u0026#39; ✅ Solución: Manejar los errores con try y except.\n🔹 Uso de try y except # Podemos usar try para manejar excepciones:\ntry: x = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) print(f\u0026#34;x is {x}\u0026#34;) except ValueError: print(\u0026#34;x is not an integer\u0026#34;) ✅ Ventaja: El programa no se detiene si el usuario ingresa un valor incorrecto.\n🔹 try con else # Si try se ejecuta sin errores, podemos usar else:\ntry: x = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) except ValueError: print(\u0026#34;x is not an integer\u0026#34;) else: print(f\u0026#34;x is {x}\u0026#34;) 🔹 Beneficio: else solo se ejecuta si no hubo error en try.\n🔹 Mejorando la Entrada con un Bucle # Podemos hacer que el programa siga pidiendo la entrada hasta que el usuario ingrese un número válido:\nwhile True: try: x = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) break # Sale del bucle si la entrada es válida except ValueError: print(\u0026#34;x is not an integer\u0026#34;) print(f\u0026#34;x is {x}\u0026#34;) ✅ Beneficio: El usuario es re-promptado si ingresa un valor incorrecto.\n🔹 Creando una Función para Obtener un Entero # Podemos reutilizar la validación con una función:\ndef get_int(): while True: try: return int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) except ValueError: print(\u0026#34;x is not an integer\u0026#34;) Llamamos a la función en main():\ndef main(): x = get_int() print(f\u0026#34;x is {x}\u0026#34;) main() ✅ Beneficio: Código más limpio y reutilizable.\n🔹 Uso de pass # Podemos omitir los mensajes de error y simplemente volver a solicitar la entrada:\ndef get_int(): while True: try: return int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) except ValueError: pass ✅ Beneficio: No muestra mensajes de error, solo vuelve a preguntar.\n🔹 Mejorando la Función con un Parámetro prompt # Podemos personalizar el mensaje que se muestra al usuario:\ndef get_int(prompt): while True: try: return int(input(prompt)) except ValueError: pass ✅ Uso en main():\ndef main(): x = get_int(\u0026#34;Enter a number: \u0026#34;) print(f\u0026#34;x is {x}\u0026#34;) main() 🔹 Beneficio: Más flexibilidad al solicitar la entrada.\n📌 Resumen # ✔️ Excepciones ocurren cuando algo sale mal en el código. ✔️ try y except permiten manejar errores. ✔️ else ejecuta código solo si try no falla. ✔️ Bucle while permite solicitar la entrada hasta que sea válida. ✔️ Funciones como get_int() ayudan a reutilizar código. ✔️ pass permite ignorar errores y volver a pedir datos. ✔️ Parámetros en funciones permiten personalizar la entrada del usuario.\n🚀 Ahora puedes manejar errores en Python de manera eficiente!\n"},{"id":7,"href":"/curso-programacion-python/docs/course/s5-bibliotecas-python/","title":"Semana 5: Bibliotecas en python","section":"Docs","content":" Semana 5: Bibliotecas en python # 📌 Contenido # Librerías en Python Uso de random Uso de statistics Argumentos en línea de comandos Uso de slice Instalación de paquetes (pip) APIs y requests Creación de librerías propias Resumen 🔹 Librerías en Python # Las librerías son fragmentos de código reutilizables escritos por otros desarrolladores o por ti mismo.\nPython permite importar estas librerías usando import.\nimport random Esto nos da acceso a todas las funciones de la librería random.\n🔹 Uso de random # La librería random permite trabajar con valores aleatorios.\n📍 Selección aleatoria con choice() # from random import choice coin = choice([\u0026#34;heads\u0026#34;, \u0026#34;tails\u0026#34;]) print(coin) 📍 Número aleatorio con randint() # import random number = random.randint(1, 10) print(number) 📍 Mezclar una lista con shuffle() # import random cards = [\u0026#34;jack\u0026#34;, \u0026#34;queen\u0026#34;, \u0026#34;king\u0026#34;] random.shuffle(cards) print(cards) Puedes aprender más en la documentación oficial de Python sobre random.\n🔹 Uso de statistics # La librería statistics permite cálculos estadísticos:\nimport statistics print(statistics.mean([100, 90])) ✅ Calcula la media aritmética de los valores de la lista.\nPuedes aprender más en la documentación oficial de Python sobre statistics.\n🔹 Argumentos en Línea de Comandos # El módulo sys permite recibir argumentos desde la terminal.\nimport sys print(\u0026#34;hello, my name is\u0026#34;, sys.argv[1]) ⚠ Errores comunes: Si no se proporciona un argumento, sys.argv[1] generará un error.\n✅ Manejo de errores con try-except:\nimport sys try: print(\u0026#34;hello, my name is\u0026#34;, sys.argv[1]) except IndexError: print(\u0026#34;Too few arguments\u0026#34;) ✅ Verificación de número de argumentos:\nimport sys if len(sys.argv) \u0026lt; 2: sys.exit(\u0026#34;Too few arguments\u0026#34;) elif len(sys.argv) \u0026gt; 2: sys.exit(\u0026#34;Too many arguments\u0026#34;) print(\u0026#34;hello, my name is\u0026#34;, sys.argv[1]) 🔹 Uso de slice # El método slice permite seleccionar partes de una lista:\nimport sys if len(sys.argv) \u0026lt; 2: sys.exit(\u0026#34;Too few arguments\u0026#34;) for arg in sys.argv[1:]: print(\u0026#34;hello, my name is\u0026#34;, arg) ✅ sys.argv[1:] omite el primer elemento (sys.argv[0], el nombre del script).\n🔹 Instalación de Paquetes (pip) # Python permite instalar paquetes de terceros desde PyPI usando pip.\nEjemplo: Instalación de cowsay:\npip install cowsay Uso en código:\nimport cowsay import sys if len(sys.argv) == 2: cowsay.cow(\u0026#34;hello, \u0026#34; + sys.argv[1]) ✅ También puedes usar otros personajes como cowsay.trex().\nPuedes aprender más sobre paquetes en la documentación de pip.\n🔹 APIs y requests # El módulo requests permite obtener datos desde la web.\nInstalación:\npip install requests Ejemplo de uso con la API de iTunes:\nimport requests import sys if len(sys.argv) != 2: sys.exit() response = requests.get(\u0026#34;https://itunes.apple.com/search?entity=song\u0026amp;limit=1\u0026amp;term=\u0026#34; + sys.argv[1]) print(response.json()) ✅ Para mejorar la legibilidad del JSON:\nimport json print(json.dumps(response.json(), indent=2)) ✅ Para obtener solo los nombres de las canciones:\nresponse = requests.get(\u0026#34;https://itunes.apple.com/search?entity=song\u0026amp;limit=50\u0026amp;term=\u0026#34; + sys.argv[1]) songs = response.json() for song in songs[\u0026#34;results\u0026#34;]: print(song[\u0026#34;trackName\u0026#34;]) Puedes aprender más en la documentación de requests.\n🔹 Creación de Librerías Propias # Podemos crear nuestras propias librerías en Python.\nEjemplo: Creamos sayings.py con las siguientes funciones:\ndef hello(name): print(f\u0026#34;hello, {name}\u0026#34;) def goodbye(name): print(f\u0026#34;goodbye, {name}\u0026#34;) Luego, podemos importarlas en otro archivo say.py:\nfrom sayings import goodbye import sys if len(sys.argv) == 2: goodbye(sys.argv[1]) ✅ Beneficio: Podemos reutilizar código en múltiples proyectos.\n📌 Resumen # ✔️ Librerías permiten extender las capacidades de Python. ✔️ random ayuda a generar valores aleatorios. ✔️ statistics permite cálculos estadísticos. ✔️ sys.argv permite recibir argumentos desde la terminal. ✔️ slice selecciona partes de listas. ✔️ Paquetes (pip) permiten instalar librerías externas. ✔️ APIs (requests) facilitan obtener datos de la web. ✔️ Podemos crear nuestras propias librerías para reutilizar código.\n🚀 Ahora puedes trabajar con librerías en Python y optimizar tu código!\n"},{"id":8,"href":"/curso-programacion-python/docs/course/s6-pruebas-debugging/","title":"Semana 6: Pruebas unitarias y debugging","section":"Docs","content":" Semana 6: Pruebas unitarias y debugging # 📌 Contenido # Pruebas unitarias (Unit Tests) Uso de assert Uso de pytest Pruebas con cadenas (Strings) Organización de pruebas en carpetas Resumen 🔹 Pruebas Unitarias # Las pruebas unitarias permiten verificar si funciones individuales de un programa funcionan correctamente.\nEjemplo:\ndef main(): x = int(input(\u0026#34;What\u0026#39;s x? \u0026#34;)) print(\u0026#34;x squared is\u0026#34;, square(x)) def square(n): return n * n if __name__ == \u0026#34;__main__\u0026#34;: main() Podemos crear una prueba para esta función en test_calculator.py:\nfrom calculator import square def test_square(): if square(2) != 4: print(\u0026#34;2 squared was not 4\u0026#34;) if square(3) != 9: print(\u0026#34;3 squared was not 9\u0026#34;) ✅ Ejecutar prueba:\npython test_calculator.py 🔹 Uso de assert # Podemos mejorar nuestras pruebas usando assert, que verifica si una condición es True:\nfrom calculator import square def test_square(): assert square(2) == 4 assert square(3) == 9 ✅ Si una prueba falla, Python genera un AssertionError.\n🔹 Errores intencionales para prueba:\ndef square(n): return n + n # Error intencional Ejecutar python test_calculator.py ahora generará un AssertionError.\nPuedes aprender más en la documentación oficial de Python sobre assert.\n🔹 Uso de pytest # pytest es un framework de pruebas que simplifica la ejecución de pruebas unitarias.\n🔹 Instalar pytest:\npip install pytest 🔹 Código de prueba con pytest (test_calculator.py):\nfrom calculator import square def test_positive(): assert square(2) == 4 assert square(3) == 9 def test_negative(): assert square(-2) == 4 assert square(-3) == 9 def test_zero(): assert square(0) == 0 ✅ Ejecutar pytest:\npytest test_calculator.py 🔹 Prueba de errores con pytest.raises:\nimport pytest from calculator import square def test_str(): with pytest.raises(TypeError): square(\u0026#34;cat\u0026#34;) ✅ Verifica que una excepción TypeError sea lanzada.\nPuedes aprender más en la documentación oficial de pytest.\n🔹 Pruebas con Cadenas (Strings) # Ejemplo con hello.py:\ndef hello(to=\u0026#34;world\u0026#34;): return f\u0026#34;hello, {to}\u0026#34; 🔹 Código de prueba (test_hello.py):\nfrom hello import hello def test_default(): assert hello() == \u0026#34;hello, world\u0026#34; def test_argument(): assert hello(\u0026#34;David\u0026#34;) == \u0026#34;hello, David\u0026#34; ✅ Ejecutar pruebas con pytest:\npytest test_hello.py 🔹 Organización de Pruebas en Carpetas # Es común organizar pruebas en una carpeta específica:\nCrear una carpeta test: mkdir test Mover test_hello.py a la carpeta test/.\nCrear un archivo test/__init__.py (puede estar vacío).\nEjecutar todas las pruebas de la carpeta:\npytest test Puedes aprender más sobre organización de pruebas en la documentación de pytest sobre importación.\n📌 Resumen # ✔️ Pruebas unitarias ayudan a garantizar que el código funcione correctamente. ✔️ assert permite verificar condiciones en las pruebas. ✔️ pytest simplifica la ejecución de pruebas. ✔️ pytest.raises verifica que los errores sean manejados correctamente. ✔️ Pruebas con cadenas permiten validar funciones de texto. ✔️ Organizar pruebas en carpetas facilita la gestión de grandes proyectos.\n🚀 Ahora puedes escribir y ejecutar pruebas en Python!\n"},{"id":9,"href":"/curso-programacion-python/docs/course/s7-manejo-archivos/","title":"Semana 7: Manejo de archivos","section":"Docs","content":" Semana 7: Manejo de archivos # 📌 Contenido # Manipulación de archivos en Python Uso de open para leer y escribir archivos Uso de with para manejar archivos Trabajo con archivos CSV Archivos binarios y PIL (manejo de imágenes) Resumen 🔹 File I/O (Entrada y Salida de Archivos) # Hasta ahora, los datos ingresados en nuestros programas se pierden al finalizar la ejecución. Con File I/O, podemos leer y escribir archivos para almacenar información.\nEjemplo básico de entrada del usuario:\nname = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) print(f\u0026#34;hello, {name}\u0026#34;) Ahora, guardemos los nombres en una lista:\nnames = [] for _ in range(3): names.append(input(\u0026#34;What\u0026#39;s your name? \u0026#34;)) Podemos ordenarlos antes de imprimir:\nfor name in sorted(names): print(f\u0026#34;hello, {name}\u0026#34;) Pero, al terminar el programa, los datos se pierden. Para almacenarlos, escribimos en un archivo.\n🔹 Uso de open # Podemos usar open() para escribir en un archivo:\nname = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) file = open(\u0026#34;names.txt\u0026#34;, \u0026#34;w\u0026#34;) file.write(name) file.close() ✅ Esto guarda el nombre en names.txt, pero sobrescribe el contenido cada vez.\nSi queremos agregar nombres sin sobrescribir:\nfile = open(\u0026#34;names.txt\u0026#34;, \u0026#34;a\u0026#34;) file.write(f\u0026#34;{name}\\n\u0026#34;) file.close() Puedes aprender más en la documentación oficial de open.\n🔹 Uso de with para manejar archivos # with se usa para abrir archivos y asegurarse de que se cierren automáticamente:\nname = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) with open(\u0026#34;names.txt\u0026#34;, \u0026#34;a\u0026#34;) as file: file.write(f\u0026#34;{name}\\n\u0026#34;) Para leer el archivo:\nwith open(\u0026#34;names.txt\u0026#34;, \u0026#34;r\u0026#34;) as file: for line in file: print(\u0026#34;hello,\u0026#34;, line.rstrip()) ✅ rstrip() elimina espacios en blanco adicionales.\n🔹 Trabajo con archivos CSV # CSV (Comma Separated Values) almacena datos en forma tabular.\nEjemplo de students.csv:\nHermione,Gryffindor Harry,Gryffindor Ron,Gryffindor Draco,Slytherin Podemos leer el archivo en Python:\nwith open(\u0026#34;students.csv\u0026#34;) as file: for line in file: name, house = line.rstrip().split(\u0026#34;,\u0026#34;) print(f\u0026#34;{name} is in {house}\u0026#34;) 🔹 Uso de csv.reader:\nimport csv students = [] with open(\u0026#34;students.csv\u0026#34;) as file: reader = csv.reader(file) for row in reader: students.append({\u0026#34;name\u0026#34;: row[0], \u0026#34;house\u0026#34;: row[1]}) 🔹 Uso de csv.DictReader:\nwith open(\u0026#34;students.csv\u0026#34;) as file: reader = csv.DictReader(file) for row in reader: print(f\u0026#34;{row[\u0026#39;name\u0026#39;]} is in {row[\u0026#39;house\u0026#39;]}\u0026#34;) ✅ Ventaja: Accede a los valores por nombre en lugar de índice.\n🔹 Escribir en un CSV con DictWriter:\nimport csv name = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) home = input(\u0026#34;Where\u0026#39;s your home? \u0026#34;) with open(\u0026#34;students.csv\u0026#34;, \u0026#34;a\u0026#34;) as file: writer = csv.DictWriter(file, fieldnames=[\u0026#34;name\u0026#34;, \u0026#34;home\u0026#34;]) writer.writerow({\u0026#34;name\u0026#34;: name, \u0026#34;home\u0026#34;: home}) Puedes aprender más en la documentación oficial de csv.\n🔹 Archivos Binarios y PIL # Las imágenes y otros archivos no textuales son archivos binarios.\nLa librería PIL (Pillow) permite manipular imágenes en Python.\n🔹 Instalar Pillow:\npip install pillow 🔹 Crear una imagen GIF animada:\nimport sys from PIL import Image images = [] for arg in sys.argv[1:]: image = Image.open(arg) images.append(image) images[0].save( \u0026#34;costumes.gif\u0026#34;, save_all=True, append_images=[images[1]], duration=200, loop=0 ) Ejecutar:\npython costumes.py costume1.gif costume2.gif ✅ Combina imágenes en un GIF animado.\nPuedes aprender más en la documentación oficial de Pillow.\n📌 Resumen # ✔️ open() permite leer y escribir archivos. ✔️ with facilita la gestión de archivos. ✔️ CSV es útil para almacenar datos estructurados. ✔️ csv.reader y csv.DictReader permiten leer archivos CSV de forma flexible. ✔️ PIL (Pillow) permite manipular imágenes en Python. ✔️ Los archivos binarios almacenan información no textual como imágenes y audio.\n🚀 Ahora puedes manejar archivos en Python y almacenar datos de forma persistente!\n"},{"id":10,"href":"/curso-programacion-python/docs/course/s8-expresiones-regulares/","title":"Semana 8: Expresiones regulares","section":"Docs","content":" Semana 8: Expresiones regulares # Contenidos # Expresiones Regulares Sensibilidad a Mayúsculas y Minúsculas Limpieza de la Entrada del Usuario Extracción de la Entrada del Usuario Resumen Las expresiones regulares o \u0026ldquo;regex\u0026rdquo; permiten examinar patrones dentro de un código. Son útiles para validar formatos, como correos electrónicos o URLs.\nValidación de correos electrónicos # email = input(\u0026#34;What\u0026#39;s your email? \u0026#34;).strip() if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid\u0026#34;) else: print(\u0026#34;Invalid\u0026#34;) Este código es mejorable. Por ejemplo, permite correos no válidos como @..\nMejorando la validación con split() # email = input(\u0026#34;What\u0026#39;s your email? \u0026#34;).strip() username, domain = email.split(\u0026#34;@\u0026#34;) if username and domain.endswith(\u0026#34;.edu\u0026#34;): print(\u0026#34;Valid\u0026#34;) else: print(\u0026#34;Invalid\u0026#34;) Aún así, malan@.edu sería válido. Para mejorar la validación, usamos el módulo re.\nimport re email = input(\u0026#34;What\u0026#39;s your email? \u0026#34;).strip() if re.search(r\u0026#34;^[^@]+@[^@]+\\.edu$\u0026#34;, email): print(\u0026#34;Valid\u0026#34;) else: print(\u0026#34;Invalid\u0026#34;) Conceptos clave en Regex # Símbolo Significado . Cualquier carácter excepto nueva línea * 0 o más repeticiones + 1 o más repeticiones ? 0 o 1 repetición {m,n} Entre m y n repeticiones ^ Inicio de la cadena $ Fin de la cadena [] Conjunto de caracteres [^] Complemento del conjunto ` ` Ejemplo mejorado:\nimport re email = input(\u0026#34;What\u0026#39;s your email? \u0026#34;).strip() if re.search(r\u0026#34;^\\w+@(\\w+\\.)?\\w+\\.edu$\u0026#34;, email, re.IGNORECASE): print(\u0026#34;Valid\u0026#34;) else: print(\u0026#34;Invalid\u0026#34;) Limpieza de entrada del usuario # Ejemplo de formato de nombres:\nimport re name = input(\u0026#34;What\u0026#39;s your name? \u0026#34;).strip() if matches := re.search(r\u0026#34;^(.+), *(.+)$\u0026#34;, name): name = matches.group(2) + \u0026#34; \u0026#34; + matches.group(1) print(f\u0026#34;hello, {name}\u0026#34;) Explicación:\n(.+) captura el apellido. * permite espacios opcionales. (.+)$ captura el nombre. Extracción de datos de URLs # Queremos extraer un username de un URL de Twitter:\nimport re url = input(\u0026#34;URL: \u0026#34;).strip() if matches := re.search(r\u0026#34;^https?://(?:www\\.)?twitter\\.com/([a-z0-9_]+)\u0026#34;, url, re.IGNORECASE): print(f\u0026#34;Username: {matches.group(1)}\u0026#34;) Explicación:\nhttps?:// acepta http o https. (?:www\\.)? hace opcional el www.. twitter\\.com/ busca la URL base. ([a-z0-9_]+) captura el nombre de usuario. Resumen # Hemos aprendido sobre:\nUso de expresiones regulares para validación. Limpieza de entrada del usuario con re.search(). Extracción de información con re.sub() y re.match(). Uso de banderas como re.IGNORECASE para hacer validaciones más flexibles. Puedes profundizar en la documentación oficial de Python sobre re: Documentación de re.\n"},{"id":11,"href":"/curso-programacion-python/docs/course/s9-programacion-objetos/","title":"Semana 9: Programación orientada a objetos","section":"Docs","content":" Semana 9: Programación orientada a objetos # Contenidos # Clases raise Decoradores Conexión con trabajos anteriores en este curso Métodos de clase Métodos estáticos Herencia Herencia y Excepciones Sobrecarga de operadores Resumen Programación Orientada a Objetos # Existen diferentes paradigmas de programación. A medida que aprendas otros lenguajes, comenzarás a reconocer estos patrones.\nHasta ahora, has trabajado con un paradigma procedimental, paso a paso.\nLa Programación Orientada a Objetos (POO) es una solución poderosa para resolver problemas en programación.\nPara comenzar, escribe el siguiente comando en la terminal para crear un archivo:\ncode estudiante.py Luego, escribe el siguiente código:\nnombre = input(\u0026#34;Nombre: \u0026#34;) casa = input(\u0026#34;Casa: \u0026#34;) print(f\u0026#34;{nombre} de {casa}\u0026#34;) Este programa sigue un paradigma procedimental, ejecutándose paso a paso como has visto en otras partes del curso.\nSiguiendo nuestro aprendizaje previo, podemos crear funciones para mejorar nuestro código y hacerlo más modular:\ndef main(): nombre = obtener_nombre() casa = obtener_casa() print(f\u0026#34;{nombre} de {casa}\u0026#34;) def obtener_nombre(): return input(\u0026#34;Nombre: \u0026#34;) def obtener_casa(): return input(\u0026#34;Casa: \u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() Notarás que obtener_nombre y obtener_casa abstraen partes del código dentro de funciones.\nAdemás, las últimas líneas del código indican al intérprete que debe ejecutar la función main().\nPodemos optimizar aún más nuestro programa almacenando el estudiante como una tupla.\nUna tupla es una secuencia de valores inmutables, a diferencia de una lista que puede modificarse.\ndef main(): nombre, casa = obtener_estudiante() print(f\u0026#34;{nombre} de {casa}\u0026#34;) def obtener_estudiante(): nombre = input(\u0026#34;Nombre: \u0026#34;) casa = input(\u0026#34;Casa: \u0026#34;) return nombre, casa if __name__ == \u0026#34;__main__\u0026#34;: main() Aquí, la función obtener_estudiante() devuelve una tupla con los valores de nombre y casa.\nPodemos incluso mejorar la legibilidad empaquetando la tupla en una variable estudiante:\ndef main(): estudiante = obtener_estudiante() print(f\u0026#34;{estudiante[0]} de {estudiante[1]}\u0026#34;) def obtener_estudiante(): nombre = input(\u0026#34;Nombre: \u0026#34;) casa = input(\u0026#34;Casa: \u0026#34;) return (nombre, casa) if __name__ == \u0026#34;__main__\u0026#34;: main() Notarás que ahora accedemos a los datos del estudiante mediante índices (estudiante[0] y estudiante[1]).\nSin embargo, las tuplas son inmutables, lo que significa que no podemos modificar sus valores una vez definidos.\nSi intentamos modificar la tupla, obtendremos un error.\nUna solución es usar listas en lugar de tuplas, ya que las listas sí pueden modificarse:\ndef main(): estudiante = obtener_estudiante() if estudiante[0] == \u0026#34;Padma\u0026#34;: estudiante[1] = \u0026#34;Ravenclaw\u0026#34; print(f\u0026#34;{estudiante[0]} de {estudiante[1]}\u0026#34;) def obtener_estudiante(): nombre = input(\u0026#34;Nombre: \u0026#34;) casa = input(\u0026#34;Casa: \u0026#34;) return [nombre, casa] if __name__ == \u0026#34;__main__\u0026#34;: main() Otra alternativa mejorada es utilizar un diccionario, que asocia claves con valores:\ndef main(): estudiante = obtener_estudiante() print(f\u0026#34;{estudiante[\u0026#39;nombre\u0026#39;]} de {estudiante[\u0026#39;casa\u0026#39;]}\u0026#34;) def obtener_estudiante(): return { \u0026#34;nombre\u0026#34;: input(\u0026#34;Nombre: \u0026#34;), \u0026#34;casa\u0026#34;: input(\u0026#34;Casa: \u0026#34;) } if __name__ == \u0026#34;__main__\u0026#34;: main() Clases # Las clases en POO nos permiten definir nuestros propios tipos de datos con nombres específicos.\nPodemos modificar nuestro código para crear una clase llamada Estudiante:\nclass Estudiante: ... def main(): estudiante = obtener_estudiante() print(f\u0026#34;{estudiante.nombre} de {estudiante.casa}\u0026#34;) def obtener_estudiante(): estudiante = Estudiante() estudiante.nombre = input(\u0026#34;Nombre: \u0026#34;) estudiante.casa = input(\u0026#34;Casa: \u0026#34;) return estudiante if __name__ == \u0026#34;__main__\u0026#34;: main() Cuando creamos un objeto a partir de una clase, lo llamamos una instancia de esa clase.\nEl objeto estudiante es una instancia de Estudiante.\nPodemos definir un método especial en nuestra clase llamado __init__, que actúa como un constructor:\nclass Estudiante: def __init__(self, nombre, casa): self.nombre = nombre self.casa = casa def main(): estudiante = obtener_estudiante() print(f\u0026#34;{estudiante.nombre} de {estudiante.casa}\u0026#34;) def obtener_estudiante(): nombre = input(\u0026#34;Nombre: \u0026#34;) casa = input(\u0026#34;Casa: \u0026#34;) return Estudiante(nombre, casa) if __name__ == \u0026#34;__main__\u0026#34;: main() Aquí, __init__ se ejecuta automáticamente cada vez que se crea un Estudiante, estableciendo sus atributos.\nResumen # En esta lección aprendiste sobre:\nClases y Objetos Métodos y Propiedades Herencia Decoradores Sobrecarga de operadores 🚀 ¡Ahora tienes una base sólida en Programación Orientada a Objetos en Python! 🚀\n"},{"id":12,"href":"/curso-programacion-python/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":13,"href":"/curso-programacion-python/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":14,"href":"/curso-programacion-python/docs/course/hidden/","title":"Hidden","section":"Docs","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "}]